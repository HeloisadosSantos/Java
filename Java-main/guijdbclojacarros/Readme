1- postgre
2- schemas
3- tables
4- vews
5- all rows
criar outras duas guias de usuario e cliente

--------------------------------------------------

package Controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import Model.Carros;
import logs.RegistroOperacoes;

/**
 * CarrosControl
 */
public class CarrosControl {

    // Atributos
    private List<Carros> carros; // Lista de objetos Carros
    private final DefaultTableModel tableModel; // Modelo da tabela Swing para exibição dos dados
    private JTable table; // Tabela Swing onde os dados são exibidos
    private int linhaSelecionada;
    private JButton editar;
    private JButton apagar; // Adicionando a variável de linhaSelecionada

    // Construtor
    public CarrosControl(List<Carros> carros, DefaultTableModel tableModel, JTable table, JButton editar, JButton apagar) {
        this.carros = carros; // Inicializa a lista de carros
        this.tableModel = tableModel; // Inicializa o modelo da tabela
        this.table = table; // Inicializa a tabela Swing
        this.linhaSelecionada = -1; // Inicializa linhaSelecionada
        this.editar = editar; // Inicializa o botão editar
        this.apagar = apagar; // Inicializa o botão apagar
        initializeTable(); // Adicionando a inicialização da tabela ao construtor
    }

    public CarrosControl(List<Carros> carros, DefaultTableModel tableModel, JTable table) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    // Método para atualizar a tabela de exibição com dados do banco de dados
    private void atualizarTabela() {
        tableModel.setRowCount(0); // Limpa todas as linhas existentes na tabela
        carros = new CarrosDAO().listarTodos(); // Obtém os carros atualizados do banco de dados
        for (Carros carro : carros) {
            // Adiciona os dados de cada carro como uma nova linha na tabela Swing
            tableModel.addRow(new Object[]{carro.getMarca(), carro.getModelo(), carro.getAno(), carro.getPlaca(), carro.getValor()});
        }
    }

    // Método para cadastrar um novo carro no banco de dados
    public void cadastrar(String marca, String modelo, String ano, String placa, String valor) {
        new CarrosDAO().cadastrar(marca, modelo, ano, placa, valor);

        // Chama o método de cadastro no banco de dados
        atualizarTabela(); // Atualiza a tabela de exibição após o cadastro
    }

    // Método para atualizar os dados de um carro no banco de dados
    public void atualizar(String marca, String modelo, String ano, String placa, String valor) {
        new CarrosDAO().atualizar(marca, modelo, ano, placa, valor);
        // Chama o método de atualização no banco de dados
        atualizarTabela(); // Atualiza a tabela de exibição após a atualização
    }

    // Método para apagar um carro do banco de dados
    public void apagar(String placa) {
        new CarrosDAO().apagar(placa);
        // Chama o método de exclusão no banco de dados
        atualizarTabela(); // Atualiza a tabela de exibição após a exclusão
    }

    // Inicializa a tabela e configura os botões
    public void initializeTable() {
        // Configura a ação do botão "cadastrar" para adicionar um novo registro no banco
        // de dados
        editar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Adicione aqui a lógica para a ação do botão "editar"
                // Pode chamar um método, exibir uma janela, etc.
            }
        });

        // Configura a ação do botão "editar" para atualizar um registro no banco de
        // dados
        apagar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Adicione aqui a lógica para a ação do botão "apagar"
                // Pode chamar um método, exibir uma janela de confirmação, etc.
            }
        });

        // Adiciona um MouseListener à tabela para capturar eventos de clique nas linhas
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                linhaSelecionada = table.rowAtPoint(evt.getPoint());
                if (linhaSelecionada != -1) {
                    // Adicione aqui a lógica para o clique na tabela
                    // Pode preencher campos de edição com os dados da linha clicada, etc.
                }
            }
        });
    }
}
